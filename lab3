# Формируется матрица F следующим образом: если А симметрична относительно главной диагонали,
# то поменять в В симметрично области 1 и 3 местами, иначе С и Е поменять местами несимметрично.
# При этом матрица А не меняется. После чего вычисляется выражение: К * (F+A) * AT – AT + F.
# Выводятся по мере формирования А, F и все матричные операции последовательно.
import random


def printm(mat):
    for row in mat:
        for elem in row:
            print('{:5}'.format(elem), end=' ')
        print()


def simple(a):
    if a < 0:
        a *= -1
    k = 0
    for i in range(2, a // 2 + 1):
        if a % i == 0:
            k += 1
    if k <= 0:
        return True
    else:
        return False


def paste(matF, matrix, column_index, row_index):
    a = column_index
    for row in matrix:
        for element in row:
            matF[row_index][column_index] = element
            column_index += 1
        row_index += 1
        column_index = a


def zero(size):
    return [[0 for _ in range(size)] for _ in range(size)]


def inputm(mat, i1, i2, j1, j2):
    zero_mat = zero(len(mat) // 2)
    for i in range(i1, i2):
        for j in range(j1, j2):
            zero_mat[i - i1][j - j1] = mat[i][j]
    return zero_mat


K = int(input('Введите число K: '))
n = int(input('Введите число число N, больше или равное 5: '))

if n >= 5:
    pass
else:
    print('Введен неправильное N, попробуйте еще')
    while n < 5:
        n = int(input('Введите число число N, больше или равное 5: '))

answer = input(
    'Для использование единичной матрицы напишите 1, для использования случайно сгенерированной напишите 2: ')
if answer not in ['1', '2']:
    print('Попробуйте ещё')
    while answer not in ['1', '2']:
        n = int(input(
            'Для использование единичной матрицы напишите 1, для использования случайно сгенерированной напишите 2: '))
if answer == '1':
    A = [[(1) for i in range(n)] for j in range(n)]
elif answer == '2':
    A = [[random.randint(-10, 10) for i in range(n)] for j in range(n)]

print('Матрица А:')
printm(A)

half_n = n // 2
fix_n = half_n
if n % 2 != 0:
    fix_n += 1

E = inputm(A, 0, half_n, fix_n, n)
B = inputm(A, fix_n, n, fix_n, n)
C = inputm(A, fix_n, n, 0, half_n)
D = inputm(A, 0, half_n, 0, half_n)

print('Подматрицы матрицы A:')
print('Подматрица D')
printm(D)
print('Подматрица E')
printm(E)
print('Подматрица С')
printm(C)
print('Подматрица B')
printm(B)

sim = True


for i in range(n):
    for j in range(n):
        if i != j:
            if A[i][j] == A[j][i]:
                continue
            else:
                sim = False

if sim:
    print('матрица А оказалась симметрична относительно главной диагонали')
    print('поменяем в B симметрично области 1 и 3 местами')
    print('Начальная подматрциа B:')
    printm(C)
    for i in range((n // 4) + 1):
        for j in range(i, half_n - i):
            B[j][i], B[j][((n // 4) + 1) - i] = B[j][((n // 4) + 1) - i], B[j][i]
    print('Получившаяся подматрица B:')
    printm(C)
else:
    print('матрица А оказалась не симметрична относительно главной диагонали')
    print('С и E поменяем местами несимметрично')
    C, E = E, C

F = A.copy()
paste(F, D, 0, 0)
paste(F, E, fix_n, 0)
paste(F, B, fix_n, fix_n)
paste(F, C, 0, fix_n)

print('Матрица F:')
printm(F)


print('Вычисляем К * (F+A) * AT – AT + F:')

FA = zero(n)
print('Результат (F+A):')
for i in range(n):
    for j in range(n):
        FA[i][j] = A[i][j] + F[i][j]
printm(FA)


KFA = FA.copy()
print('Результат К * (F+A):')
for i in range(n):
    for j in range(n):
        KFA[i][j] *= K
printm(KFA)


At = zero(n)
print("Матрица А транспонированая:")
for i in range(n):
    for j in range(n):
        At[i][j] = A[j][i]
printm(At)

KFAT = KFA.copy()
print('Результат К * (F+A) * AT:')
for i in range(n):
    for j in range(n):
        KFAT[i][j] *= At[i][j]
printm(KFAT)


ATF = zero(n)
print('Результат AT + F:')
for i in range(n):
    for j in range(n):
        ATF[i][j] = At[i][j] + F[i][j]
printm(ATF)


result = KFAT.copy()
for i in range(n):
    for j in range(n):
        result[i][j] -= ATF[i][j]
print('Результат:')
printm(result)
